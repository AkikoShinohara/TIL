[ 特定の文字から始まる要素 ]
・li [ class^=“prep”] {プロパティ} → ^= …から始まるprepの要素に対して装飾を加えたい 

[ ある要素の中での要素の選択 ]
・[ 要素：first-child ] → 何らかの要素の中で一番最初に現れるようにつけることで、選択することができる （兄弟要素のグループの中での位置づけの選択）
                                    ：← 「擬似クラス」といわれるもの (ある要素にマウスカーソルが乗った状態の時・特定の要素のうち最初に出てくるもの) ⇄ last-child （最後の要素を指定する時）
・[ 要素：nth-child(数字) ] → div要素の中で何番目とかに指定したい際に使われる擬似クラス
・[ 要素：first-of-type ] → div要素の中にある最初の要素をしてする際に使われる擬似クラス（指定した要素に絞って順番を数える）すべての要素を順番に数えていたfirst-child とは異なる ⇄ last-of-type 最後の要素
・[ 要素：nth-of-type() ] → 何らかの要素の中にある何番目の要素を指定したい時（指定した要素以外のものを順番に入れて数えることができない）

[ 枠線を作ってみよう ]
・[ box-shadow: x座標 y座標 ぼかし 色 inset ] → ある要素に影をつけさせることができる
　　　　　　　　　　　　　　　　　　　       x座標の値が大きくなればなるほど、影は右に・小さくなればなるほど影は左にずれる
                 　　　　　　　　　　　　　　     y座標の値が大きくなればなるほど影は下に・小さくなればなるほど影は下にずれる 
                                                                ★ Insetを最後に入れることによって、要素の内側に影を入れられます
・[ text-shadow：x座標 y座標 ぼかし 色 ] → テキストに影を入れられることができる(y座標の数字を入れることでテキストの下に影を入れることができる)
        　　　　　　　　　　　　　　　　　　　  x座標の値が大きくなればなるほど、影は右に・小さくなればなるほど影は左にずれる
                 　　　　　　　　　　　　　　        y座標の値が大きくなればなるほど影は下に・小さくなればなるほど影は下にずれる 
・[ overflow: hedden; ] → 枠線を丸めた際にはみ出した文字を消すために使われるプロパティ

[ グラデーションをつける ]
・[ background: linear-gradient( 最初の色, 最後の色 ); ] → 線型グラデーションに使用( 上からし下へグラデーション)
・[ background: radial-gradient( 内側の色, 外側の色 ); ] → 円型グラデーションに使用( 内側から外側へグラデーション)

[ 要素を滑らかに変化させる ]
・[ transition: (変化させたい属性) width or hight etc.. linear 秒数(s); ] → マウスを乗せた際に要素が滑らかに変化させる :hoverに乗せたときの要素の変化を指定させる
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　   どのように動いたほうがいいのかを指定させるプロパティである
・[ transition: background-color liner 秒数(s); ] → 背景色を滑らかに変化させるtransitionの中に背景色を指定することによって背景色を滑らかに変化させることができる
・[ transition: all liner 秒数(s); ] → カーソルを載せた際にすべての属性が秒数で動いてくれるように「all」を使う
        　　　　　　　　　　　　　　　  ・linear → 速度変わらない
　　　　　　　　　　　　　　　　　　 ・ease → ゆっくり始まり ゆっくり終わる
　　　　　　　　　　　　　　　          ・ease-in → ゆっくりと始まる
　　　　　　　　　　　　　　　　　    ・ease-out → ゆっくりを終わる
[ アニメーションを作るを作り動かす ]
・[ @keyframes アニメーション名{…} ] → アニメーションの一連の流れをまとめたもの
              　　　　　　　　　　　　　　　　  アニメーションのタイミングは{0%~100%}の範囲で指定される　0%がアニメーションの最初の状態 100%がアニメーションの最後の状態（この範囲内なら任意の部分に指定可能）
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓ アニメーションを動かすプロパティ
・[ animation: アニメーション名 変化の仕方 秒数 繰り返す回数; ] → ある要素に作成させたアニメーションを指定する その要素に対して「animation・・・」プロパティをつける
          　　　　　　　　　　　　　　　　　　　　　　　　　　　　   ・繰り返す回数を何度も繰り返したい時 → 「 infinite 」を最後に使う
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　 ・「 100%~0% 」で方向で動かしたい時 → 「 alternate 」を最後に使う
[ ボックスモデルを理解 ]
・[ box-sizing: border-box; ] → ボックスモデルの計算ルールが、height, width で指定した領域の中にpaddingとborderが含まれるようになる
　　　　　　　　　　　　　　　     デフォルトでは「content-box」height, widthで指定した領域の中にはpadding, margin, borderは含まない

[ ネガティブマージンについて ]
・[ margin: -px ] → ネガティブマージンを指定することで、最も左にある画像の右のマージンが相殺され、サイズ内にliタグのものを収めることができる
[ float について]
・[ float ] → float要素を用いると、親要素から浮いた状態となるため、親要素から親要素から要素の高さを所得できずにfloatした要素がはみ出てしまう ⇄ この対策 overflow: auto; や 要素::after 擬似要素　clear: both;
・[ clear: both; ] → floatを解除するためのプロパティ・左右両方のfloatと切り離され、下に移動する
　　　　　　　　      ・clear: left; → 左のfloatと切り離され、下に移動する
　　　　　　　　　　・clear: right; → 右のfloatと切り離され、下に移動する
・[ overflow: auto; ] → floatした要素の親要素の高さを正しく見せるために親要素にこのプロパティをかけることで、親要素の高さを正しく見せることができる
・[ 要素::after 、 clear: both ] → clearfixテクニックを使用するにはfloatしている親要素に対して「::after」擬似要素を使ってfloatをclearにさせる
　　　　　　　　　　　　　　　　　::beforeと::afterは単純に前と後ろに適用させたいと単純に考えて良い HTMLをあまり書きすぎないようにするためもある
                 
。て
